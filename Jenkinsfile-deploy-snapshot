#!groovy

ARTIFACT_NEXUS_URL = ""
ARTIFACT_GROUP = ""
ARTIFACT_NAME = ""
ARTIFACT_VERSION = ""

stage ('Approve deploy?') {
    timeout(time: 5, unit: 'MINUTES') {
        input message: 'Deploy snapshot?'
    }
}

// one at a time!
lock('lock-deploy-snapshot') {
    stage('Deploy snapshot') {
        node {
            timeout(time: 5, unit: 'MINUTES') {
                checkout scm

                stash excludes: 'smoketest/build/', includes: 'gradle.properties, app-ui/gradle.properties, smoke-test/**', name: 'source'

                def props = readProperties file: 'app-ui/gradle.properties'
                def appUIProps = readProperties file: 'app-ui/gradle.properties'

                ARTIFACT_NEXUS_URL = props['artifactNexusUrl']
                ARTIFACT_GROUP = props['artifactGroup']
                ARTIFACT_NAME = props['artifactName']
                ARTIFACT_VERSION = appUIProps['version']

                build job: 'Clusterview-deploy-SNAPSHOT-cloudfoundry', parameters: [string(name: 'NEXUS_URL', value: ARTIFACT_NEXUS_URL),
                                                                                    string(name: 'REPO',      value: 'snapshots'),
                                                                                    string(name: 'GROUP',     value: ARTIFACT_GROUP),
                                                                                    string(name: 'ARTIFACT',  value: ARTIFACT_NAME),
                                                                                    string(name: 'VERSION',   value: ARTIFACT_VERSION)]
            }
        }
    }
}

stage ('Health check') {
    timeout(time: 5, unit: 'MINUTES') {
        node {
            retry(5) {
                unstash 'source'
                sh 'chmod 755 gradlew'

                sh 'SPRING_PROFILES_ACTIVE=test ./gradlew smokeTest'
            }
        }
    }
}

stage ('Clean up') {
    node {
        timeout(time: 2, unit: 'MINUTES') {
            step([$class: 'WsCleanup', cleanWhenFailure: false, cleanWhenUnstable: false, notFailBuild: true])
        }
    }
}
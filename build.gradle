buildscript {
	ext {
		NEXUS_REPO_URL = 'http://192.168.1.31:8082/nexus/content/repositories'

		springBootVersion = '1.5.2.RELEASE'
		propDepsVersion = '0.0.7'
		pitestVersion = '1.1.11'
		owaspDepCheckVersion = '1.4.5'
	}
	repositories {
		mavenCentral()

		maven {
			url 'https://plugins.gradle.org/m2/'
		}
		maven {
			url 'http://repo.spring.io/plugins-release'
		}
	}
	dependencies {
		classpath ("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath ("org.springframework.build.gradle:propdeps-plugin:${propDepsVersion}")
		classpath ("info.solidsoft.gradle.pitest:gradle-pitest-plugin:${pitestVersion}")
		classpath ("org.owasp:dependency-check-gradle:${owaspDepCheckVersion}")
	}
}

plugins {
	// Build scan should be first
	// id 'com.gradle.build-scan' version '1.4'

	id "io.spring.dependency-management" version "1.0.0.RELEASE"
	id 'net.saliman.cobertura' version '2.4.0'
	id 'com.github.kt3k.coveralls' version '2.7.1'
	id 'net.researchgate.release' version '2.4.0'
	id 'com.gorylenko.gradle-git-properties' version '1.4.17'
}

apply plugin: 'net.saliman.cobertura'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'jacoco'

configure(allprojects) {
	sourceCompatibility = 1.8
	targetCompatibility = 1.8

	apply plugin: 'java'

	apply plugin: 'propdeps'
	apply plugin: 'propdeps-maven'
	apply plugin: 'propdeps-idea'
	apply plugin: 'propdeps-eclipse'

	repositories {
		mavenCentral()
	}
}

configure(subprojects - project(":application:core")) {
	apply plugin: 'io.spring.dependency-management'

	dependencyManagement {
		imports {
			mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
		}
	}
}

configure([project(':app'), project(':application:configuration'), project(':app-ui')]) {
	apply plugin: 'org.springframework.boot'
	apply plugin: 'maven'
	apply plugin: 'jacoco'
	apply plugin: 'idea'
	apply plugin: 'jdepend'
	apply plugin: 'findbugs'
	apply plugin: 'pmd'
	apply plugin: 'org.owasp.dependencycheck'
	apply plugin: 'net.researchgate.release'
	apply plugin: 'net.saliman.cobertura'
	apply plugin: 'com.github.kt3k.coveralls'
	apply plugin: 'com.gorylenko.gradle-git-properties'
	apply plugin: 'info.solidsoft.pitest'
}

task wrapper(type: Wrapper) {
	gradleVersion = '3.4'
}

ext {
	jcacheVersion = '1.0.0'
	ehcacheVersion = '3.3.1'

	springSecurityTestVersion = '4.2.1.RELEASE'
	junitParamsVersion = '1.1.0'
	meanBeanVersion = '2.0.3'
	equalsVerifierVersion = '2.2.2'
	jsoupVersion = '1.10.2'

	guavaVersion = '21.0'
	commonsLangVersion = '3.5'
	commonsCollectionsVersion = '4.1'
	commonsValidatorVersion = '1.6'
	immutablesVersion = '2.4.6'
	nullableVersion = '3.0.2'

	hashidsVersion = '1.0.1'
	jugVersion = '3.1.4'

	jsonSchemaVersion = '1.0.21'
	jsonSchemaValidatorVersion = '2.2.6'

	logstashLogbackVersion = '4.8'
	janinoVersion = '3.0.6'

	springfoxSwagger2Version = '2.6.1'

	junitVersion = '4.12'
	assertJVersion = '3.6.2'
	mockitoVersion = '2.7.22'
}

ext.app_tests = [
		unit_test: [
				"junit:junit:${junitVersion}",
				"org.assertj:assertj-core:${assertJVersion}",
				"org.mockito:mockito-core:${mockitoVersion}",
				"nl.jqno.equalsverifier:equalsverifier:${equalsVerifierVersion}",
				"pl.pragmatists:JUnitParams:${junitParamsVersion}"
		],
		spring_test: [
				"org.springframework.boot:spring-boot-starter-test",
				"org.springframework.security:spring-security-test:${springSecurityTestVersion}"
		]
]

project("application:configuration") {
	description = "Application configuration"

	dependencies {
		compile project(':application:core')
		compile project(':application:periphery:data')
		compile project(':application:periphery:web')

		compile ("org.springframework.boot:spring-boot-starter-security")
		compile ('org.springframework.boot:spring-boot-starter-actuator')
		compile ('org.springframework.boot:spring-boot-actuator-docs')
		compile ('org.springframework.boot:spring-boot-starter-aop')
		compile ('org.springframework.retry:spring-retry')

		compile ("com.h2database:h2")

		compile ("net.logstash.logback:logstash-logback-encoder:${logstashLogbackVersion}")
		compile ("org.codehaus.janino:janino:${janinoVersion}")

		compile ("io.springfox:springfox-swagger2:${springfoxSwagger2Version}")
		compile ("io.springfox:springfox-swagger-ui:${springfoxSwagger2Version}")

		compile ("org.apache.commons:commons-lang3:${commonsLangVersion}")

		optional ("org.springframework.boot:spring-boot-devtools")

		testCompile app_tests.unit_test
		testCompile app_tests.spring_test
	}
}

project("application:core") {
	description = "Application core"

	dependencies {
		compile group: 'com.google.guava', name: 'guava', version: "${guavaVersion}"
		compile group: 'org.apache.commons', name: 'commons-lang3', version: "${commonsLangVersion}"
		compile group: 'commons-validator', name: 'commons-validator', version: "${commonsValidatorVersion}"
		compile group: 'com.google.code.findbugs', name: 'jsr305', version: "${nullableVersion}"

		provided group: 'org.immutables', name: 'value', version: "${immutablesVersion}"

		testCompile app_tests.unit_test
	}
}

project("application:periphery:data") {
	description = "Application periphery data"

	dependencies {
		compile project(':application:core')
		compile project(':application:periphery:infra')

		compile("org.springframework.boot:spring-boot-starter-data-jpa")
		compile("org.springframework.boot:spring-boot-starter-security")
		compile("org.springframework.boot:spring-boot-starter-cache")
		compile("org.apache.commons:commons-lang3:${commonsLangVersion}")

		testCompile app_tests.unit_test
		testCompile app_tests.spring_test
	}
}

project("application:periphery:infra") {
	description = "Application periphery infra"

	dependencies {
		compile("org.springframework.boot:spring-boot-starter-security")
		compile("org.springframework.boot:spring-boot-starter-aop")
		compile("javax.cache:cache-api:${jcacheVersion}")
		compile("org.ehcache:ehcache:${ehcacheVersion}")
		compile("org.apache.commons:commons-lang3:${commonsLangVersion}")
		compile("com.google.guava:guava:${guavaVersion}")
		compile("org.apache.commons:commons-collections4:${commonsCollectionsVersion}")

		testCompile app_tests.unit_test
	}
}

project("application:periphery:web") {
	description = "Application periphery web"

	dependencies {
		compile project(':application:core')
		compile project(':application:periphery:infra')

		compile("org.springframework.boot:spring-boot-starter-web")
		compile("org.springframework.boot:spring-boot-starter-hateoas")
		compile("org.springframework.data:spring-data-rest-hal-browser")
		compile("com.fasterxml.uuid:java-uuid-generator:${jugVersion}")
		compile("org.hashids:hashids:${hashidsVersion}")
		compile("com.kjetland:mbknor-jackson-jsonschema_2.12:${jsonSchemaVersion}")
		compile("com.github.fge:json-schema-validator:${jsonSchemaValidatorVersion}")

		testCompile app_tests.unit_test
		testCompile app_tests.spring_test
	}
}






def publishedProjects = subprojects.findAll { it.name == 'app' || it.name == 'app-ui' }
task jacocoMerge(type: JacocoMerge) {
	publishedProjects.each { subproject ->
		executionData subproject.tasks.withType(Test)
	}
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
	description = 'Generates an aggregate report from all subprojects'
	dependsOn publishedProjects.test , jacocoMerge

	additionalSourceDirs = files(publishedProjects.sourceSets.main.allSource.srcDirs)
	sourceDirectories = files(publishedProjects.sourceSets.main.allSource.srcDirs)
	classDirectories = files(publishedProjects.sourceSets.main.output)
	//executionData = files(publishedProjects.jacocoTestReport.executionData)
	executionData jacocoMerge.destinationFile

	reports {
		html.enabled = true // human readable
		xml.enabled = true // required by coveralls
	}

	afterEvaluate {
		classDirectories = files(classDirectories.files.collect {
			fileTree(dir: it,
					exclude: ['org/amhzing/clusterview/app/configuration/**',
							  'org/amhzing/clusterview/appui/configuration/**'])
		})
	}

	doFirst {
		executionData = files(executionData.findAll { it.exists() })
	}
}

coveralls {
	sourceDirs = publishedProjects.sourceSets.main.allSource.srcDirs.flatten()
	jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
	group = 'Coverage reports'
	description = 'Uploads the aggregated coverage report to Coveralls'

	dependsOn jacocoRootReport
	onlyIf { true }
}
project("app-ui") {
	description = "Application UI"

	dependencies {
		compile project(':application')

		compile ("org.springframework.boot:spring-boot-starter-thymeleaf")
		compile ("org.stagemonitor:stagemonitor-logging:${ui_versions.stageMonitor}")
		compile ("org.stagemonitor:stagemonitor-web:${ui_versions.stageMonitor}")
		compile ("org.thymeleaf.extras:thymeleaf-extras-springsecurity4:${ui_versions.thymeleafSpringSecurity}")
		compile ("org.webjars:bootstrap:${ui_versions.webjarsBootstrap}")
		compile ("org.webjars:font-awesome:${ui_versions.webjarsFontAwesome}")
		compile ("org.webjars:jquery:${ui_versions.webjarsJquery}")
		compile ("org.webjars:modernizr:${ui_versions.webjarsModernizr}")
		compile ("org.webjars:webjars-locator:${ui_versions.webjarsLocator}")

		testCompile ("org.jsoup:jsoup:${test_versions.jsoup}")
		testCompile ("org.meanbean:meanbean:${test_versions.meanBean}")
		testCompile ('org.springframework.boot:spring-boot-starter-test')
		testCompile ("org.springframework.security:spring-security-test:${test_versions.springSecurityTest}")
		testCompile ("nl.jqno.equalsverifier:equalsverifier:${test_versions.equalsVerifier}")
		testCompile ("pl.pragmatists:JUnitParams:${test_versions.junitParams}")

		optional ("org.springframework.boot:spring-boot-devtools")
	}
}

project("application") {
	description = "Application"

	dependencies {
		compile project(':application:configuration')

		optional ("org.springframework.boot:spring-boot-devtools")
	}
}

project("application:adapter") {
	description = "Application adapter"

	dependencies {
		compile project(':application:core')

		compile ("com.fasterxml.jackson.core:jackson-core:${versions.jackson}")
		compile ("com.fasterxml.jackson.core:jackson-databind:${versions.jackson}")
		compile("com.fasterxml.uuid:java-uuid-generator:${versions.jug}")
		compile ("org.apache.commons:commons-lang3:${versions.commonsLang}")
		compile ("org.hashids:hashids:${versions.hashids}")

		provided group: 'org.immutables', name: 'value', version: "${versions.immutables}"

		testCompile app_tests.unit_test
	}
}

project("application:configuration") {
	description = "Application configuration"

	dependencies {
		compile project(':application:adapter')
		compile project(':application:core')
		compile project(':application:periphery:data')
		compile project(':application:periphery:web')

		compile ("com.h2database:h2")
		compile ("io.springfox:springfox-swagger-ui:${versions.springfoxSwagger2}")
		compile ("io.springfox:springfox-swagger2:${versions.springfoxSwagger2}")
		compile ("net.logstash.logback:logstash-logback-encoder:${log_versions.logstashLogback}")
		compile ("org.apache.commons:commons-lang3:${versions.commonsLang}")
		compile ("org.codehaus.janino:janino:${log_versions.janino}")
		compile ("org.springframework.boot:spring-boot-starter-security")
		compile ('org.springframework.boot:spring-boot-actuator-docs')
		compile ('org.springframework.boot:spring-boot-starter-actuator')
		compile ('org.springframework.boot:spring-boot-starter-aop')
		compile ('org.springframework.retry:spring-retry')

		testCompile app_tests.spring_test
		testCompile app_tests.unit_test
	}
}

project("application:core") {
	description = "Application core"

	dependencies {
		compile group: 'com.google.code.findbugs', name: 'jsr305', version: "${versions.nullableJsr305}"
		compile group: 'com.google.guava', name: 'guava', version: "${versions.guava}"
		compile group: 'commons-validator', name: 'commons-validator', version: "${versions.commonsValidator}"
		compile group: 'org.apache.commons', name: 'commons-lang3', version: "${versions.commonsLang}"

		provided group: 'org.immutables', name: 'value', version: "${versions.immutables}"

		testCompile app_tests.unit_test
	}
}

project("application:periphery:data") {
	description = "Application periphery data"

	// Need to override version to be 5.2.3 or greater so that we can use "hibernate.jdbc.time_zone: UTC"
	ext['hibernate.version'] = '5.2.9.Final'

	dependencies {
		compile project(':application:core')

		compile("javax.cache:cache-api:${cache_versions.jcache}")
		compile("org.apache.commons:commons-lang3:${versions.commonsLang}")
		compile("org.ehcache:ehcache:${cache_versions.ehcache}")
		compile("org.springframework.boot:spring-boot-starter-cache")
		compile("org.springframework.boot:spring-boot-starter-data-jpa")
		compile("org.springframework.boot:spring-boot-starter-security")

		testCompile app_tests.unit_test
		testCompile app_tests.spring_test
	}
}

project("application:periphery:web") {
	description = "Application periphery web"

	dependencies {
		compile project(':application:adapter')

		compile("com.fasterxml.uuid:java-uuid-generator:${versions.jug}")
		compile("org.apache.commons:commons-collections4:${versions.commonsCollections}")
		compile("org.hashids:hashids:${versions.hashids}")
		compile("org.springframework.boot:spring-boot-starter-aop")
		compile("org.springframework.boot:spring-boot-starter-hateoas")
		compile("org.springframework.boot:spring-boot-starter-security")
		compile("org.springframework.boot:spring-boot-starter-web")
		compile("org.springframework.data:spring-data-rest-hal-browser")

		testCompile app_tests.spring_test
		testCompile app_tests.unit_test
	}
}

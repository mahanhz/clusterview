def integrationTestProj = project(':test:integration-test')

def publishedProjects = subprojects.findAll {
	((it.path.contains(":application:") && it.name != "periphery") ||
			it.name == 'app-ui' ||
			it.name == integrationTestProj.getName())
}

configure(publishedProjects) {
	apply plugin: 'net.saliman.cobertura'
	apply plugin: 'com.github.kt3k.coveralls'
	apply plugin: 'jacoco'

	jacocoTestReport {
		reports {
			xml.enabled = true // coveralls plugin depends on xml format report
			html.enabled = true
		}
	}
}

task jacocoMerge(type: JacocoMerge) {
	publishedProjects.each { subproject ->
		executionData subproject.tasks.withType(Test)
	}

	executionData fileTree(integrationTestProj.rootDir.absolutePath).include("**/build/jacoco/*.exec")

	doFirst {
		executionData = files(executionData.findAll { it.exists() })
	}
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
	description = 'Generates an aggregate report from all subprojects'
	dependsOn publishedProjects.test, ':test:integration-test:integrationTest', jacocoMerge

	additionalSourceDirs = files(publishedProjects.sourceSets.main.allSource.srcDirs)
	sourceDirectories = files(publishedProjects.sourceSets.main.allSource.srcDirs)
	classDirectories = files(publishedProjects.sourceSets.main.output)

	executionData jacocoMerge.destinationFile

	reports {
		html.enabled = true // human readable
		xml.enabled = true // required by coveralls
	}

	afterEvaluate {
		classDirectories = files(classDirectories.files.collect {
			fileTree(dir: it,
					exclude: ['org/amhzing/clusterview/configuration/*Config.*',
							  'org/amhzing/clusterview/appui/configuration/**'])
		})
	}
}

coveralls {
	sourceDirs = publishedProjects.sourceSets.main.allSource.srcDirs.flatten()
	jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
	group = 'Coverage reports'
	description = 'Uploads the aggregated coverage report to Coveralls'

	dependsOn jacocoRootReport
	onlyIf { true }
}